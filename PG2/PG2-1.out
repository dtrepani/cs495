Listing PG2.cpp...

/*
* Name:			Desiree Trepanier
* Project:		PG2 - Rubix Cube
* Description:	Textured rubix cube using OpenGL that can be rotated.
*/
#include "PG2.h"

SDL_Window *mainWindow;
SDL_Surface **textureSurface;
GLuint *texture;

double rotX, rotY, rotZ, rotAmt;

float vertices[] = {
    // Top face
    -1.0,  1.0,  1.0,
     1.0,  1.0,  1.0,
     1.0,  1.0, -1.0,
    -1.0,  1.0, -1.0,

    // Bottom face
    -1.0, -1.0, -1.0,
     1.0, -1.0, -1.0,
     1.0, -1.0,  1.0,
    -1.0, -1.0,  1.0,

    // Front face
    -1.0, -1.0,  1.0,
     1.0, -1.0,  1.0,
     1.0,  1.0,  1.0,
    -1.0,  1.0,  1.0,

    // Back face
     1.0, -1.0, -1.0,
    -1.0, -1.0, -1.0,
    -1.0,  1.0, -1.0,
     1.0,  1.0, -1.0,

    // Left face
    -1.0, -1.0, -1.0,
    -1.0, -1.0,  1.0,
    -1.0,  1.0,  1.0,
    -1.0,  1.0, -1.0,

    // Right face
     1.0, -1.0,  1.0,
     1.0, -1.0, -1.0,
     1.0,  1.0, -1.0,
     1.0,  1.0,  1.0,
};

AxisRotation movingRotation[3] = {
	{"X", false, false},
	{"Y", false, false},
	{"Z", false, false}
};

int main(int argc, char **argv) {
	init();
	pollEventsAndDraw();

	SDL_DestroyWindow(mainWindow);
	SDL_Quit();
	return 0;
}

// Initialize variables and window.
void init() {
	rotX = rotY = rotZ = 0;
	rotAmt = 0.5;

	SDL_Init(SDL_INIT_VIDEO);
	SDL_GL_SetAttribute(SDL_GL_CONTEXT_MAJOR_VERSION, 2);
	SDL_GL_SetAttribute(SDL_GL_CONTEXT_MINOR_VERSION, 1);

	mainWindow = SDL_CreateWindow(	"Rubix Cube",
									SDL_WINDOWPOS_UNDEFINED,
									SDL_WINDOWPOS_UNDEFINED,
									WIDTH,
									HEIGHT,
									SDL_WINDOW_OPENGL | SDL_WINDOW_SHOWN );
	if(mainWindow == NULL) cout << "SDL_CreateWindow: " << SDL_GetError() << endl;
	SDL_GL_CreateContext(mainWindow);
	SDL_GL_SetSwapInterval(1);

	initOpenGL();
}

// Initialize OpenGL
void initOpenGL() {
	double ratio = ((double)WIDTH) / ((double)HEIGHT);

	glShadeModel(GL_SMOOTH);
	glClearColor(1, 1, 1, 1);
	glClearDepth(1);
	glEnable(GL_TEXTURE_2D);
	glEnable(GL_DEPTH_TEST);
	glDepthFunc(GL_LEQUAL);
	glHint(GL_PERSPECTIVE_CORRECTION_HINT, GL_NICEST);

	glViewport(0, 0, WIDTH, HEIGHT);
	glMatrixMode(GL_PROJECTION);
	glLoadIdentity();
	glFrustum(	-tan( 45.0/360*PI ) * 0.1 * ratio,
				tan( 45.0/360*PI ) * 0.1 * ratio,
				-tan( 45.0/360*PI ) * 0.1,
				tan( 45.0/360*PI ) * 0.1,
				0.1,
				100 );

	loadTextures();
	glMatrixMode(GL_MODELVIEW);
	glLoadIdentity();
}


// Load the textures for later use when drawing the faces of the rubix cube.
void loadTextures() {
	textureSurface = new SDL_Surface *[6];
	texture = new GLuint[6];

	for( int i = 0; i < 6; i++) {
		textureSurface[i] = IMG_Load(("media\\" + to_string(i) + ".jpg").c_str());
		if(textureSurface[i] == NULL) cout << "IMG_Load: " << SDL_GetError() << endl;

		glGenTextures(1, &texture[i]);
		glBindTexture(GL_TEXTURE_2D, texture[i]);
		glTexImage2D(	GL_TEXTURE_2D, 0, 3,
						textureSurface[i]->w, textureSurface[i]->h, 0,
						GL_BGR, GL_UNSIGNED_BYTE, textureSurface[i]->pixels );
		glTexParameteri( GL_TEXTURE_2D,
						 GL_TEXTURE_MIN_FILTER,
						 GL_LINEAR );
		glTexParameteri( GL_TEXTURE_2D,
						 GL_TEXTURE_MAG_FILTER,
						 GL_LINEAR );

		SDL_FreeSurface( textureSurface[i] );
	}

	delete[] textureSurface;
}

// Checks for keyboard and button events, in which it will react to accordingly, then draws the rubix cube.
// Clicking the window close button or ESC key breaks out of the loop in order to unitialize objects before
// the program exits.
void pollEventsAndDraw() {
	SDL_Event event;
	bool running = true;

	while( running ) {
		if( SDL_PollEvent(&event) )
			if( event.type == SDL_QUIT )
				running = false;
			else if( event.type == SDL_KEYDOWN )
				checkKeys(event, running);

		drawRubixCube();
	}
}

// If any of the arrow keys, Z, or A have been pressed, rotate the cube accordingly.
// If space has been pressed, stopped all rotation. ESC will close the program.
void checkKeys(SDL_Event &event, bool &running) {
	switch(event.key.keysym.sym) {
		case SDLK_LEFT:
			setRotation("X", true, false);
			break;
		case SDLK_RIGHT:
			setRotation("X", false, true);
			break;
		case SDLK_UP:
			setRotation("Y", true, false);
			break;
		case SDLK_DOWN:
			setRotation("Y", false, true);
			break;
		case SDLK_a:
			setRotation("Z", true, false);
			break;
		case SDLK_z:
			setRotation("Z", false, true);
			break;
		case SDLK_SPACE:
			for(int i = 0; i < 3; i++) {
				movingRotation[i].posMovement = false;
				movingRotation[i].negMovement = false;
			}
			break;
		case SDLK_ESCAPE:
			running = false;
	}
}

// Used to rotate the cube around the proper axis.
void setRotation(string anAxis, bool posMovement, bool negMovement) {
	int axis = getAxisNum(anAxis);

	movingRotation[axis].posMovement = posMovement;
	movingRotation[axis].negMovement = negMovement;
}

// Used to find the corresponding array number in movingRotation[] to a given axis.
int getAxisNum(string anAxis) {
	for(int i = 0; i < 3; i++)
		if(movingRotation[i].axis == anAxis)
			return i;

	return 3; // Error
}

// Draw the rubix cube to the window with its current rotation, textures, and position.
// To have a multi-texture cube and prevent clipping, additional quads are draw slightly
// raised off the main cube.
void drawRubixCube() {
	glClear( GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT );
	glLoadIdentity();

	glTranslatef (0, 0, -6);
	glColor3f(0, 0, 0);

	rotateCube();

	glBegin(GL_QUADS);
		for( int i = 0; i < 6; i++)
			drawQuad(i, 0);
	glEnd();

	glColor3f(1, 1, 1);

	for( int i = 0; i < 6; i++) {
		glBindTexture(GL_TEXTURE_2D, texture[i]);
		glBegin(GL_QUADS);
			drawQuad(i, 0.005);
		glEnd();
	}

	SDL_GL_SwapWindow(mainWindow);
}

// Set the current rotation of the cube and rotate it further if applicable
void rotateCube() {
	glRotatef (rotX, 1, 0, 0);
	glRotatef (rotY, 0, 1, 0);
	glRotatef (rotZ, 0, 0, 1);

	rotX += getRotationAmount("X");
	rotY += getRotationAmount("Y");
	rotZ += getRotationAmount("Z");
}

// Used to determine if an axis is moving at all. This is determined by whether posMovement
// or negMovement is true. If it is moving in the positive direction, return the positive
// rotation amount. If negative direction, return negative rotation amount. Else, it's not moving.
double getRotationAmount(string anAxis) {
	int axis = getAxisNum(anAxis);

	if(movingRotation[axis].posMovement) return rotAmt;
	else if(movingRotation[axis].negMovement) return -rotAmt;
	else return 0;
}

// Draw the quads to the face of a cube. Each face has 12 vertices.
// Face values: Top = 0, Bottom = 1, Front = 2, Back = 3, Left = 4, Right = 5
void drawQuad(int face, double offset) {
	face = face*12;

	glTexCoord2f( 0, 0 ); glVertex3f(   getVertex( face, offset),  getVertex( face+1, offset),  getVertex( face+2, offset) );
	glTexCoord2f( 1, 0 ); glVertex3f( getVertex( face+3, offset),  getVertex( face+4, offset),  getVertex( face+5, offset) );
	glTexCoord2f( 1, 1 ); glVertex3f( getVertex( face+6, offset),  getVertex( face+7, offset),  getVertex( face+8, offset) );
	glTexCoord2f( 0, 1 ); glVertex3f( getVertex( face+9, offset), getVertex( face+10, offset), getVertex( face+11, offset) );
}


// Returns the adjusted float value of the vertex based on the offset.
float getVertex(int vertexIndex, double offset) {
	if( vertices[vertexIndex] < 0 ) offset = -1 * offset;
	return vertices[vertexIndex] + offset;
}

Listing PG2.h...

/*
* Name:			Desiree Trepanier
* Project:		PG2 - Rubix Cube
* Description:	Textured rubix cube using OpenGL that can be rotated.
*/
#ifndef _PG2_
#define _PG2_

#include <iostream>
#include <string>
#include <cstdlib>
#include <cmath>
#include <SDL.h>
#include <SDL_opengl.h>
#include <SDL_image.h>
using namespace std;

#define PI 3.1415926535897932384626433832795
#define WIDTH 640
#define HEIGHT 480

typedef struct {
	string axis;
	bool posMovement;
	bool negMovement;
} AxisRotation;

int main(int argc, char **argv);
void init();
void initOpenGL();
void loadTextures();
void pollEventsAndDraw();
void checkKeys(SDL_Event &event, bool &running);
void setRotation(string anAxis, bool posMovement, bool negMovement);
int getAxisNum(string anAxis);
void drawRubixCube();
void rotateCube();
double getRotationAmount(string anAxis);
void drawQuad(int face, double offset);
float getVertex(int vertexIndex, double offset);

#endif


Microsoft Windows [Version 6.1.7601]
Copyright (c) 2009 Microsoft Corporation.  All rights reserved.

C:\Users\apoe\Desktop\Grading Folder>sdlcompileall PG2.exe
Microsoft Windows [Version 6.1.7601]
Copyright (c) 2009 Microsoft Corporation.  All rights reserved.

C:\Users\apoe\Desktop\Grading Folder>"C:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\vcvarsall.bat" x86
Setting environment for using Microsoft Visual Studio 2010 x86 tools.

C:\Users\apoe\Desktop\Grading Folder>cl /Tp "PG2.cpp" /O2 /EHsc /W2 /MD /I "C:\SDL\include" /link /subsystem:console /OUT:"PG2.exe" "C:\SDL\lib\x86\SDL2.lib" "C:\SDL\lib\x86\SDL2main.lib" "C:\SDL\lib\x86\SDL2test.lib" "C:\SDL\lib\x86\SDL2_image.lib" "C:\SDL\lib\x86\SDL2_mixer.lib" opengl32.lib glu32.lib
PG2.cpp
PG2.cpp(123) : error C2668: 'std::to_string' : ambiguous call to overloaded function
        c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\INCLUDE\string(688): could be 'std::string std::to_string(long double)'
        c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\INCLUDE\string(680): or       'std::string std::to_string(_ULonglong)'
        c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\INCLUDE\string(672): or       'std::string std::to_string(_Longlong)'
        while trying to match the argument list '(int)'
PG2.cpp(123) : error C2228: left of '.c_str' must have class/struct/union

C:\Users\apoe\Desktop\Grading Folder>Microsoft (R) 32-bit C/C++ Optimizing Compiler Version 16.00.40219.01 for 80x86
Copyright (C) Microsoft Corporation.  All rights reserved.


C:\Users\apoe\Desktop\Grading Folder>PG2
'PG2' is not recognized as an internal or external command,
operable program or batch file.

C:\Users\apoe\Desktop\Grading Folder>exit

DOES NOT COMPILE.

Cast the argument of to_string to (long long).

0/50.

Fix by Wednesday 23 September 2015.
